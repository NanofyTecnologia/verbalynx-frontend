generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  PROFESSOR
  PENDING_APPROVAL
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  cpf              String?
  classId          String?
  pronoun          String?
  observation      String?
  registrationCode String?   @unique @map("registration_code")
  graduation       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  role            Role            @default(PENDING_APPROVAL)
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  studentFeedback Feedback[]      @relation("StudentFeedback")
  teacherFeedback Feedback[]      @relation("TeacherFeedback")
  studentClasses  Class[]         @relation("StudentClasses")
  teacherClasses  Class[]         @relation("TeacherClasses")
  class           Class?          @relation(fields: [classId], references: [id])
  studentTasks    Task[]          @relation("StudentTasks")
  teacherTasks    Task[]          @relation("TeacherTasks")

  taskId      String?
  StudentTask StudentTask[]

  @@map("users")
}

model Task {
  id          String   @id @default(cuid())
  name        String
  openingDate DateTime @map("opening_date")
  closingDate DateTime @map("closing_date")
  objective   String
  teacherId   String   @map("teacher_id")
  classId     String?  @map("class_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  rubric      Rubric?
  class       Class?        @relation(fields: [classId], references: [id])
  students    User[]        @relation("StudentTasks")
  teacher     User          @relation("TeacherTasks", fields: [teacherId], references: [id], onDelete: Cascade)
  Feedback    Feedback[]
  StudentTask StudentTask[]

  @@map("tasks")
}

model StudentTask {
  id          String  @id @default(cuid())
  taskId      String
  studentId   String
  isCompleted Boolean @default(false)

  task    Task @relation(fields: [taskId], references: [id])
  student User @relation(fields: [studentId], references: [id])
}

model Videos {
  id    String @id @default(cuid())
  title String
  url   String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("videos")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Class {
  id             String @id @unique @default(cuid())
  name           String
  educationLevel String @map("education_level")
  period         String
  teacherId      String @map("teacher_id")

  tasks     Task[]
  user      User[]
  feedbacks Feedback[]
  students  User[]     @relation("StudentClasses")
  teacher   User?      @relation("TeacherClasses", fields: [teacherId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("classes")
}

model Rubric {
  id     String @id @unique @default(cuid())
  name   String
  taskId String @unique

  task      Task        @relation(fields: [taskId], references: [id])
  criterion Criterion[]

  @@map("rubrics")
}

model Criterion {
  id          String   @id @unique @default(cuid())
  name        String
  description String
  level       Int
  score       Int[]
  rubricId    String?  @map("rubric_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  rubric            Rubric?             @relation(fields: [rubricId], references: [id])
  FeedbackCriterion FeedbackCriterion[]

  @@map("criteria")
}

model Feedback {
  id        String   @id @unique @default(cuid())
  taskId    String   @map("task_id")
  classId   String   @map("class_id")
  studentId String   @map("user_id")
  teacherId String   @map("teacher_id")
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  task              Task                @relation(fields: [taskId], references: [id])
  student           User                @relation("StudentFeedback", fields: [studentId], references: [id])
  teacher           User                @relation("TeacherFeedback", fields: [teacherId], references: [id])
  class             Class               @relation(fields: [classId], references: [id])
  feedbackCriterion FeedbackCriterion[]

  @@map("feedbacks")
}

model FeedbackCriterion {
  id          String   @id @default(uuid())
  comment     String
  score       Int
  level       Int
  tips        String[]
  feedbackId  String   @map("feedback_id")
  criterionId String   @map("criterion_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  feedback  Feedback  @relation(fields: [feedbackId], references: [id])
  criterion Criterion @relation(fields: [criterionId], references: [id])

  @@map("feedback_criterion")
}
