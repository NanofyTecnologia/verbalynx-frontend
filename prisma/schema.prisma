generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  PROFESSOR
  PENDING_APPROVAL
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  cpf              String?
  classId          String?
  observation      String?
  registrationCode String?   @unique @map("registration_code")
  graduation       String?
  role             Role      @default(PENDING_APPROVAL)
  accounts         Account[]
  sessions         Session[]

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentClasses Class[] @relation("StudentClasses")
  teacherClasses Class[] @relation("TeacherClasses")
  class          Class?  @relation(fields: [classId], references: [id])
  studentTasks   Task[]  @relation("StudentTasks")
  teacherTasks   Task[]  @relation("TeacherTasks")

  taskId String?

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Task {
  id          String   @id @default(cuid())
  name        String
  openingDate DateTime @map("opening_date")
  closingDate DateTime @map("closing_date")
  rubric      String
  level       String
  objective   String
  teacherId      String   @map("teacher_id")

  students User[] @relation("StudentTasks")
  teacher  User   @relation("TeacherTasks", fields: [teacherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tasks")
}

model Session {
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Class {
  id             String @id @unique @default(cuid())
  name           String
  educationLevel String
  period         String
  teacherId      String

  User     User[]
  students User[] @relation("StudentClasses")
  teacher  User?  @relation("TeacherClasses", fields: [teacherId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("classes")
}
